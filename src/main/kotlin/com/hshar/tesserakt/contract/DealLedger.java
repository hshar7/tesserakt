package com.hshar.tesserakt.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class DealLedger extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_GETDEALSUMMARY = "getDealSummary";

    public static final String FUNC_UPDATEDOCUMENTHASHES = "updateDocumentHashes";

    public static final String FUNC_GETDOCUMENTHASHES = "getDocumentHashes";

    public static final String FUNC_ADDDEAL = "addDeal";

    public static final String FUNC_UPDATEDEAL = "updateDeal";

    public static final String FUNC_GETDEALSTATUS = "getDealStatus";

    @Deprecated
    protected DealLedger(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DealLedger(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DealLedger(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DealLedger(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple5<String, String, String, String, BigInteger>> getDealSummary(String dealId) {
        final Function function = new Function(FUNC_GETDEALSUMMARY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(dealId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, BigInteger>>(
                new Callable<Tuple5<String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> updateDocumentHashes(String dealId, String documentHashesJson) {
        final Function function = new Function(
                FUNC_UPDATEDOCUMENTHASHES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(dealId), 
                new org.web3j.abi.datatypes.Utf8String(documentHashesJson)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getDocumentHashes(String dealId) {
        final Function function = new Function(FUNC_GETDOCUMENTHASHES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(dealId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addDeal(String dealId, String underwriterId, String underwriterAddress, String borrowerName, String jurisdiction, String capitalAmount, String interestRate, String loanType, BigInteger maturity, String assetClass, String assetRating, String syndicateObject, String status, String documentHashesJson) {
        final Function function = new Function(
                FUNC_ADDDEAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(dealId), 
                new org.web3j.abi.datatypes.Utf8String(underwriterId), 
                new org.web3j.abi.datatypes.Address(underwriterAddress), 
                new org.web3j.abi.datatypes.Utf8String(borrowerName), 
                new org.web3j.abi.datatypes.Utf8String(jurisdiction), 
                new org.web3j.abi.datatypes.Utf8String(capitalAmount), 
                new org.web3j.abi.datatypes.Utf8String(interestRate), 
                new org.web3j.abi.datatypes.Utf8String(loanType), 
                new org.web3j.abi.datatypes.generated.Uint256(maturity), 
                new org.web3j.abi.datatypes.Utf8String(assetClass), 
                new org.web3j.abi.datatypes.Utf8String(assetRating), 
                new org.web3j.abi.datatypes.Utf8String(syndicateObject), 
                new org.web3j.abi.datatypes.Utf8String(status), 
                new org.web3j.abi.datatypes.Utf8String(documentHashesJson)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateDeal(String dealId, String underwriterId, String underwriterAddress, String borrowerName, String jurisdiction, String capitalAmount, String interestRate, String loanType, BigInteger maturity, String assetClass, String assetRating, String syndicateObject, String status) {
        final Function function = new Function(
                FUNC_UPDATEDEAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(dealId), 
                new org.web3j.abi.datatypes.Utf8String(underwriterId), 
                new org.web3j.abi.datatypes.Address(underwriterAddress), 
                new org.web3j.abi.datatypes.Utf8String(borrowerName), 
                new org.web3j.abi.datatypes.Utf8String(jurisdiction), 
                new org.web3j.abi.datatypes.Utf8String(capitalAmount), 
                new org.web3j.abi.datatypes.Utf8String(interestRate), 
                new org.web3j.abi.datatypes.Utf8String(loanType), 
                new org.web3j.abi.datatypes.generated.Uint256(maturity), 
                new org.web3j.abi.datatypes.Utf8String(assetClass), 
                new org.web3j.abi.datatypes.Utf8String(assetRating), 
                new org.web3j.abi.datatypes.Utf8String(syndicateObject), 
                new org.web3j.abi.datatypes.Utf8String(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getDealStatus(String dealId) {
        final Function function = new Function(FUNC_GETDEALSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(dealId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static DealLedger load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DealLedger(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DealLedger load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DealLedger(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DealLedger load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DealLedger(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DealLedger load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DealLedger(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DealLedger> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DealLedger.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DealLedger> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DealLedger.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<DealLedger> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DealLedger.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DealLedger> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DealLedger.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
